import argparse

template = """/*
*
*   Generated by map_generator.py
*
*/

#ifndef _LED_MAP_H
#define _LED_MAP_H

#define LED_COUNT {led_count}
#define LED_GRID_WIDTH {grid_width}
#define LED_GRID_HEIGHT {grid_height}
#define LED_GRID_PER_CELL {grid_count}

uint16_t led_map[{led_count}] = {{{leds}}};

uint8_t led_grid[{grid_height}][{grid_width}][{grid_count}] = {led_grid};

#endif
"""

GRID_WIDTH = 20
GRID_HEIGHT = 20

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("input", help="input svg file")
    parser.add_argument("--scheme", help="LED svg name scheme (default LED%%d)", default="LED%d")
    parser.add_argument("count", help="LED count", type=int)

    parser.add_argument("--flip_y", help="Flip Y axis", action="store_true")
    parser.add_argument("--flip_x", help="Flip X axis", action="store_true")

    args = parser.parse_args()

    with open(args.input, 'r') as target:
        svg_text = target.read()

    svg_lines = svg_text.split("\n")

    width = 0.0
    height = 0.0

    for line in svg_lines:
        if line.strip().startswith("width=") and width == 0:
            width = float(line.split("\"")[1].split("\"")[0])
        if line.strip().startswith("height=") and height == 0:
            height = float(line.split("\"")[1].split("\"")[0])
    
    relative_side = 1

    if width > height:
        relative_side = width
    else:
        relative_side = height

    leds = []

    sm_x = width + 1
    sm_y = height + 1
    lg_x = -1
    lg_y = -1

    for led_num in range(0, args.count):
        loc = svg_lines.index('       id="{0}"'.format(args.scheme) % (led_num+1))
        cx = abs(float(svg_lines[loc + 1].split("\"")[1].split("\"")[0])) / relative_side
        cy = abs(float(svg_lines[loc + 2].split("\"")[1].split("\"")[0])) / relative_side

        leds.append((cx, cy))

        if cx < sm_x: sm_x = cx
        if cy < sm_y: sm_y = cy
        if cx > lg_x: lg_x = cx
        if cy > lg_y: lg_y = cy

    hex_leds = []

    for led in leds:

        x, y = led
        x = (x - sm_x) / (lg_x - sm_x)
        y = ((y - sm_y) / (lg_y - sm_y))

        if (args.flip_x): x = 1 - x
        if (args.flip_y): y = 1 - y

        rx = int(x * 0xff)
        ry = int(y * 0xff)

        hex_leds.append("0x%02x%02x" % (rx, ry))

    led_grid = [ [ [] for x in range(0, GRID_WIDTH) ] for y in range(0, GRID_HEIGHT) ]
    max_cell_count = 0
    for gy in range(0, GRID_HEIGHT):
         for gx in range(0, GRID_WIDTH):
            x0 = (gx / GRID_WIDTH)
            y0 = (gy / GRID_HEIGHT)
            x1 = ((gx + 1) / GRID_WIDTH)
            y1 = ((gy + 1) / GRID_HEIGHT)

            cell_count = 0
            for i in range(0, args.count):
                lx, ly = leds[i]
                if lx >= x0 and lx < x1 and ly >= y0 and ly < y1:
                    led_grid[gy][gx].append(i)
                    cell_count += 1
            if cell_count > max_cell_count:
                max_cell_count = cell_count

    for gy in range(0, GRID_HEIGHT):
        for gx in range(0, GRID_WIDTH):
            while len(led_grid[gy][gx]) < max_cell_count:
                led_grid[gy][gx].append(-1)

    led_grid_str = str(led_grid).replace("[", "{").replace("]", "}")

    print(template.format(led_count=args.count,
        leds=','.join(hex_leds),
        led_grid=led_grid_str,
        grid_width=GRID_WIDTH, 
        grid_height=GRID_HEIGHT,
        grid_count=max_cell_count))
